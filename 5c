from collections import deque

class Vertex:
    def __init__(self, val):
        self.val = val
        self.adj = []
        self.parent = None
        self.visited = False
        self.dist = -1

class Graph:
    def __init__(self, v, e):
        self.v = v
        self.e = e
        self.vertices = [Vertex(i + 1) for i in range(v)]
    
    def add_edge(self, u, v):
        self.vertices[u - 1].adj.append(self.vertices[v - 1])
        self.vertices[v - 1].adj.append(self.vertices[u - 1])

def bfs_lex_smallest_path(graph, source, destination):
    # Sort adjacency lists to ensure lexicographically smallest path
    for vertex in graph.vertices:
        vertex.adj.sort(key=lambda x: x.val)

    q = deque([source])
    source.visited = True
    source.dist = 0

    while q:
        current = q.popleft()
        if current == destination:
            return True

        for neighbor in current.adj:
            if not neighbor.visited:
                neighbor.visited = True
                neighbor.dist = current.dist + 1
                neighbor.parent = current
                q.append(neighbor)
    return False

def reconstruct_path(dest):
    path = []
    current = dest
    while current:
        path.append(current.val)
        current = current.parent
    return path[::-1]

# Input
N, M, S, D = map(int, input().split())
graph = Graph(N, M)

u_nodes = list(map(int, input().split()))
v_nodes = list(map(int, input().split()))
for u, v in zip(u_nodes, v_nodes):
    graph.add_edge(u, v)

source = graph.vertices[S - 1]
destination = graph.vertices[D - 1]

# Run BFS
found = bfs_lex_smallest_path(graph, source, destination)

if not found:
    print(-1)
else:
    path = reconstruct_path(destination)
    print(len(path) - 1)
    print(' '.join(map(str, path)))
