import sys
sys.setrecursionlimit(2 * 10**5 + 5)

class Vertex:
    def __init__(self, val):
        self.val = val
        self.color = "white"
        self.discovery_time = 0
        self.finish_time = 0
        self.adj = []

class Graph:
    def __init__(self, v, e):
        self.v = v
        self.e = e
        self.vs = [Vertex(i) for i in range(1, v + 1)]

def dfs(graph):
    global time, result, has_cycle
    for vertex in graph.vs:
        if vertex.color == "white":
            dfs_visit(vertex)
        if has_cycle:
            return

def dfs_visit(u):
    global time, result, has_cycle
    u.color = "grey"
    time += 1
    u.discovery_time = time
    for v in u.adj:
        if v.color == "white":
            dfs_visit(v)
            if has_cycle:
                return
        elif v.color == "grey":
            has_cycle = True
            return
    u.color = "black"
    time += 1
    u.finish_time = time
    result.append(u.val)


time = 0
result = []
has_cycle = False

n, m = map(int, input().split())
g = Graph(n, m)

for _ in range(m):
    a, b = map(int, input().split())
    g.vs[a - 1].adj.append(g.vs[b - 1])  

dfs(g)

if has_cycle:
    print(-1)
else:
    print(*reversed(result))
