import heapq

def dijkstra(n, adj, source):
    dist = [float('inf')] * (n + 1)
    dist[source] = 0
    heap = [(0, source)]

    while heap:
        d, u = heapq.heappop(heap)

        if d > dist[u]:
            continue

        for v, w in adj[u]:
            if dist[u] + w < dist[v]:
                dist[v] = dist[u] + w
                heapq.heappush(heap, (dist[v], v))

    return dist

def main():
    n, m, s, t = map(int, input().split())
    adj = [[] for _ in range(n + 1)]  

    for _ in range(m):
        u, v, w = map(int, input().split())
        adj[u].append((v, w)) 

    dist_s = dijkstra(n, adj, s)  
    dist_t = dijkstra(n, adj, t)  
    min_time = float('inf')
    meeting_node = -1

    for node in range(1, n + 1):
        if dist_s[node] != float('inf') and dist_t[node] != float('inf'):
            time = max(dist_s[node], dist_t[node])
            if time < min_time or (time == min_time and node < meeting_node):
                min_time = time
                meeting_node = node

    if meeting_node == -1:
        print(-1)
    else:
        print(min_time, meeting_node)

if __name__ == "__main__":
    main()
