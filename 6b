class Queue:
    def __init__(self):
        self.queue = []
    
    def enqueue(self, element):
        self.queue.append(element)
    
    def dequeue(self):
        if self.isEmpty():
            return "Queue is empty"
        x = self.queue[0]
        self.queue.remove(x)
        return x
    
    def peek(self):
        if self.isEmpty():
            return "Queue is empty"
        return self.queue[0]
    
    def isEmpty(self):
        return len(self.queue) == 0
    
    def size(self):
        return len(self.queue)

class vx:
    def __init__(self, val):
        self.val = val
        self.c = -1  
        self.p = None
        self.d = 0
        self.adj = []

class graph:
    def __init__(self, v, e):
        self.v = v
        self.e = e
        self.vs = []
        for i in range(1, v + 1):
            x = vx(i)
            self.vs.append(x)

def BipartiteBicolorableBFS(G, s):
    q = Queue()
    s.c = 0
    count = [1, 0]  
    q.enqueue(s)

    while not q.isEmpty():
        u = q.dequeue()
        for v in u.adj:
            if v.c == -1:
                v.c = 1 - u.c
                count[v.c] += 1
                q.enqueue(v)
            elif v.c == u.c:
                return 0  
    return max(count)


v, e = map(int, input().split())
a = graph(v, e)
for i in range(e):
    s, d = map(int, input().split())
    a.vs[s - 1].adj.append(a.vs[d - 1])
    a.vs[d - 1].adj.append(a.vs[s - 1])

answer = 0
for i in range(v):
    if a.vs[i].c == -1:
        result = BipartiteBicolorableBFS(a, a.vs[i])
        answer += result

print(answer)
