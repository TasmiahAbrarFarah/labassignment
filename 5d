from collections import deque

class Vertex:
    def __init__(self, val):
        self.val = val
        self.adj = []
        self.parent = None
        self.visited = False
        self.dist = -1

    def reset(self):
        self.parent = None
        self.visited = False
        self.dist = -1

class Graph:
    def __init__(self, v):
        self.vertices = [Vertex(i + 1) for i in range(v)]
    
    def add_edge(self, u, v):
        self.vertices[u - 1].adj.append(self.vertices[v - 1])

    def reset_vertices(self):
        for vertex in self.vertices:
            vertex.reset()

def bfs(graph, source, target):
    graph.reset_vertices()
    q = deque([source])
    source.visited = True
    source.dist = 0

    while q:
        current = q.popleft()
        if current == target:
            return True
        for neighbor in current.adj:
            if not neighbor.visited:
                neighbor.visited = True
                neighbor.dist = current.dist + 1
                neighbor.parent = current
                q.append(neighbor)
    return False

def reconstruct_path(end):
    path = []
    current = end
    while current:
        path.append(current.val)
        current = current.parent
    return path[::-1]

N, M, S, D, K = map(int, input().split())
graph = Graph(N)

for _ in range(M):
    u, v = map(int, input().split())
    graph.add_edge(u, v)

start = graph.vertices[S - 1]
via = graph.vertices[K - 1]
end = graph.vertices[D - 1]

if not bfs(graph, start, via):
    print(-1)
else:
    path1 = reconstruct_path(via)

    if not bfs(graph, via, end):
        print(-1)
    else:
        path2 = reconstruct_path(end)
        full_path = path1 + path2[1:]
        print(len(full_path) - 1)
        print(' '.join(map(str, full_path)))
