from collections import deque

def knight_min_moves(N, x1, y1, x2, y2):

    x1 -= 1
    y1 -= 1
    x2 -= 1
    y2 -= 1

    if (x1, y1) == (x2, y2):
        return 0

    moves = [(-2, -1), (-1, -2), (1, -2), (2, -1),
             (2, 1), (1, 2), (-1, 2), (-2, 1)]

    visited_start = [[-1] * N for _ in range(N)]
    visited_end = [[-1] * N for _ in range(N)]

    queue_start = deque()
    queue_end = deque()

    queue_start.append((x1, y1))
    queue_end.append((x2, y2))

    visited_start[x1][y1] = 0
    visited_end[x2][y2] = 0

    while queue_start and queue_end:

        if len(queue_start) > len(queue_end):
            queue_start, queue_end = queue_end, queue_start
            visited_start, visited_end = visited_end, visited_start

        for _ in range(len(queue_start)):
            x, y = queue_start.popleft()

            for dx, dy in moves:
                nx, ny = x + dx, y + dy
                if 0 <= nx < N and 0 <= ny < N:
                    if visited_start[nx][ny] == -1:
                        visited_start[nx][ny] = visited_start[x][y] + 1
                        queue_start.append((nx, ny))
                        if visited_end[nx][ny] != -1:
                            return visited_start[nx][ny] + visited_end[nx][ny]

    return -1


N = int(input())
x1, y1, x2, y2 = map(int, input().split())
print(knight_min_moves(N, x1, y1, x2, y2))
