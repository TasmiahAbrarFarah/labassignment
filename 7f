import heapq

def second_shortest_path(n, adj, s, d):
    INF = float('inf')
    
    dist = [[INF, INF] for _ in range(n + 1)]  
    dist[s][0] = 0
    heap = [(0, s)]  

    while heap:
        cost, u = heapq.heappop(heap)

        for v, w in adj[u]:
            new_cost = cost + w

            if new_cost < dist[v][0]:
                dist[v][1] = dist[v][0]
                dist[v][0] = new_cost
                heapq.heappush(heap, (new_cost, v))
            elif dist[v][0] < new_cost < dist[v][1]:
                dist[v][1] = new_cost
                heapq.heappush(heap, (new_cost, v))

    ans = dist[d][1]
    if ans == INF:
        print(-1)
    else:
        print(ans)

def main():
    n, m, s, d = map(int, input().split())

    adj = [[] for _ in range(n + 1)]  

    for _ in range(m):
        u, v, w = map(int, input().split())
        adj[u].append((v, w))
        adj[v].append((u, w))  

    second_shortest_path(n, adj, s, d)

if __name__ == "__main__":
    main()
